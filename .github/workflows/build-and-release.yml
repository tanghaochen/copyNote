name: 自动更新版本并发布

on:
  push:
    branches:
      - main # 当推送到main分支时触发
    paths-ignore:
      - "**/*.md" # 忽略markdown文件变更
      - "package.json" # 忽略package.json的变更，避免版本提交后再次触发

# 添加权限配置
permissions:
  contents: write # 为workflow添加写入仓库内容的权限
  packages: write

jobs:
  version-and-release:
    name: 更新版本并发布
    runs-on: windows-latest # 固定使用Windows构建

    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史以便正确生成版本号
          token: ${{ secrets.GITHUB_TOKEN }} # 确保使用正确的token

      - name: 自动生成新版本号
        id: version
        run: |
          # 获取当前package.json中的版本号
          $currentVersion = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version

          # 解析版本号
          $major, $minor, $patch = $currentVersion.Split('.')

          # 增加补丁版本号
          $newPatch = [int]$patch + 1
          $newVersion = "$major.$minor.$newPatch"

          # 更新package.json中的版本号
          $packageJson = Get-Content -Raw -Path package.json | ConvertFrom-Json
          $packageJson.version = $newVersion
          $packageJson | ConvertTo-Json -Depth 100 | Set-Content -Path package.json -Encoding UTF8

          # 输出新版本号供后续步骤使用
          echo "NEW_VERSION=$newVersion" >> $env:GITHUB_OUTPUT
          echo "新版本号: $newVersion"
        shell: pwsh

      - name: 配置Git用户
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 提交版本更新
        run: |
          git add package.json
          git commit -m "chore: 发布 v${{ steps.version.outputs.NEW_VERSION }}"
          git tag v${{ steps.version.outputs.NEW_VERSION }}

      - name: 推送更改和标签
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 安装 PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 获取 PNPM 存储目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: 设置 PNPM 缓存
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install

      - name: 构建 Windows 应用
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run build:win

      - name: 查找并收集发布文件
        id: collect-files
        shell: pwsh
        run: |
          # 创建存储构建文件的目录
          New-Item -ItemType Directory -Path ./release-files -Force

          # 获取package.json中的应用名称
          $packageJson = Get-Content -Raw -Path package.json | ConvertFrom-Json
          $version = "${{ steps.version.outputs.NEW_VERSION }}"
          $appVersion = "${{ steps.version.outputs.NEW_VERSION }}"

          # 查找最新版本目录
          $versionDir = Get-ChildItem -Path ./release -Directory | Sort-Object -Property { [version]$_.Name } -Descending | Select-Object -First 1

          if (-not $versionDir) {
            echo "错误: 未找到版本目录!"
            Get-ChildItem -Path ./release -Recurse
            exit 1
          }

          echo "最新版本目录: $($versionDir.FullName)"

          # 查找所有EXE文件
          $exeFiles = Get-ChildItem -Path $versionDir.FullName -Filter "*.exe"

          if ($exeFiles.Count -eq 0) {
            echo "错误: 未找到安装程序文件!"
            Get-ChildItem -Path $versionDir.FullName -Recurse
            exit 1
          }

          echo "找到的安装程序文件:"
          $exeFiles | ForEach-Object { echo "- $($_.Name)" }

          # 选择第一个EXE文件
          $exeFile = $exeFiles | Select-Object -First 1
          echo "选择的安装程序: $($exeFile.FullName)"

          # 复制安装程序到发布目录
          Copy-Item -Path $exeFile.FullName -Destination "./release-files/"
          echo "INSTALLER_PATH=./release-files/$($exeFile.Name)" >> $env:GITHUB_OUTPUT
          echo "INSTALLER_NAME=$($exeFile.Name)" >> $env:GITHUB_OUTPUT

          # 复制自动更新文件
          $ymlFiles = Get-ChildItem -Path $versionDir.FullName -Filter "*.yml"

          foreach ($ymlFile in $ymlFiles) {
            Copy-Item -Path $ymlFile.FullName -Destination "./release-files/"
            echo "找到YML文件: $($ymlFile.Name)"
          }

          if ($ymlFiles.Count -gt 0) {
            $latestYml = $ymlFiles | Where-Object { $_.Name -eq "latest.yml" -or $_.Name -contains "latest" } | Select-Object -First 1
            if (-not $latestYml) { $latestYml = $ymlFiles | Select-Object -First 1 }
            echo "YML_PATH=./release-files/$($latestYml.Name)" >> $env:GITHUB_OUTPUT
          }

          # 复制blockmap文件
          $blockmapFiles = Get-ChildItem -Path $versionDir.FullName -Filter "*.blockmap"

          foreach ($blockmapFile in $blockmapFiles) {
            Copy-Item -Path $blockmapFile.FullName -Destination "./release-files/"
            echo "BLOCKMAP_PATH=./release-files/$($blockmapFile.Name)" >> $env:GITHUB_OUTPUT
          }

          # 列出要发布的文件
          echo "要发布的文件:"
          Get-ChildItem -Path "./release-files" | Format-Table Name, Length -AutoSize

      - name: 发布到 GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release-files/*
          tag_name: v${{ steps.version.outputs.NEW_VERSION }}
          name: 版本 v${{ steps.version.outputs.NEW_VERSION }}
          body: |
            ## 版本 v${{ steps.version.outputs.NEW_VERSION }}

            ### 下载说明

            - **Windows 用户**: 下载 **${{ steps.collect-files.outputs.INSTALLER_NAME }}** 文件并安装

            ### 更新内容

            - 包含最新代码变更
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
